---
apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: finished-webhook
  annotations:
    thoth-station.ninja/template-version: 0.0.1-dev
  labels:
    app: thoth
    component: finished-webhook
spec:
  templates:
    - name: finished-webhook
      inputs:
        parameters:
          - name: "WORKFLOW_NAME"
          - name: "EVENT_ID"
          - name: "CHECK_RUN_ID"
          - name: "REPO_URL"
          - name: "INSTALLATION"
          - name: "REVISION"
          - name: "THOTH_HOST"
          - name: "FINISHED_WEBHOOK"
        artifacts:
          - name: "payload"
            path: "/mnt/outputs/parameters/payload"
      script:
        command:
        - python
        env:
          - name: WEBHOOK_SECRET
            valueFrom:
              configMapKeyRef:
                key: WEBHOOK_SECRET
                name: qeb-hwt-github-app
        name: trigger-finished-webhook
        image: "quay.io/cermakm/octomachinery:latest"
        source: |
          import hmac
          import json
          import os
          import requests
          import uuid

          class webhook:
              """Scoped objects injected from scope 'webhook'."""

              @staticmethod
              def get_signature(data: bytes, key: str) -> str:
                  if not isinstance(data, bytes):
                      data = json.dumps(data).encode("UTF-8")

                  secret = key.encode("UTF-8")
                  signature = hmac.new(secret, data, digestmod="sha1")

                  return signature.hexdigest()

          uuid = str(uuid.uuid4())

          data = {
              "event": "{{inputs.parameters.EVENT_ID}}",
              "check_run_id": "{{inputs.parameters.CHECK_RUN_ID}}",
              "installation": '{"id": int("{{inputs.parameters.INSTALLATION}}")}',
              "repo_url": "{{inputs.parameters.REPO_URL}}",
              "revision": "{{inputs.parameters.REVISION}}",
              "payload": json.loads("{{inputs.artifacts.payload}}"),
          }
          signature = webhook.get_signature(data, key=os.environ["WEBHOOK_SECRET"])

          headers = {
              "Accept": "application/vnd.github.antiope-preview+json",
              "Content-Type": "application/json",
              "User-Agent": "Workflow/{{inputs.parameters.WORKFLOW_NAME}}",
              "X-GitHub-Delivery": uuid,
              "X-GitHub-Event": "{{inputs.parameters.FINISHED_WEBHOOK}}",
              "X-Hub-Signature": f"sha1={signature}",
          }

          print("Headers:\n", headers)
          print("Payload:\n", data)

          response = requests.post("{{inputs.parameters.FINISHED_WEBHOOK}}", json=data, headers=headers)
          response.raise_for_status()
        resources:
          limits:
            cpu: 100m
            memory: 128Mi
          requests:
            cpu: 100m
            memory: 128Mi
